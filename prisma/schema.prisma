// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id               String            @id @default(auto()) @map("_id") @db.ObjectId
  name             String?
  email            String?           @unique
  emailVerified    DateTime?
  image            String?
  accounts         Account[]
  sessions         Session[]
  uploadedExpenses Expense[]         @relation("ExpenseUploader")
  expenseItems     UserExpenseItem[]
  payments         Payment[]
  notifications    Notification[]
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Expense {
  id            String        @id @default(auto()) @map("_id") @db.ObjectId
  title         String
  description   String?
  totalAmount   Float
  date          DateTime
  receiptImages String[] // Array of image URLs
  items         ExpenseItem[]
  uploaderId    String        @db.ObjectId
  uploader      User          @relation("ExpenseUploader", fields: [uploaderId], references: [id])
  status        ExpenseStatus @default(PENDING)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

model ExpenseItem {
  id         String            @id @default(auto()) @map("_id") @db.ObjectId
  name       String
  amount     Float
  expenseId  String            @db.ObjectId
  expense    Expense           @relation(fields: [expenseId], references: [id], onDelete: Cascade)
  assignedTo UserExpenseItem[]
  payments   Payment[]
  status     PaymentStatus     @default(PENDING)
  createdAt  DateTime          @default(now())
  updatedAt  DateTime          @updatedAt
}

model UserExpenseItem {
  id            String      @id @default(auto()) @map("_id") @db.ObjectId
  userId        String      @db.ObjectId
  expenseItemId String      @db.ObjectId
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  expenseItem   ExpenseItem @relation(fields: [expenseItemId], references: [id], onDelete: Cascade)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  @@unique([userId, expenseItemId])
}

model Payment {
  id            String        @id @default(auto()) @map("_id") @db.ObjectId
  amount        Float
  expenseItemId String        @db.ObjectId
  expenseItem   ExpenseItem   @relation(fields: [expenseItemId], references: [id], onDelete: Cascade)
  userId        String        @db.ObjectId
  user          User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  status        PaymentStatus
  transactionId String? // For external payment reference if needed
  paymentMethod String?
  paidAt        DateTime?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

model Notification {
  id          String           @id @default(auto()) @map("_id") @db.ObjectId
  userId      String           @db.ObjectId
  user        User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  type        NotificationType
  message     String
  isRead      Boolean          @default(false)
  relatedData Json? // Flexible field to store related data
  createdAt   DateTime         @default(now())
}

enum ExpenseStatus {
  PENDING
  COMPLETED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  PAID
  REJECTED
}

enum NotificationType {
  NEW_EXPENSE
  PAYMENT_RECEIVED
  PAYMENT_REJECTED
  REMINDER
  SYSTEM
}
